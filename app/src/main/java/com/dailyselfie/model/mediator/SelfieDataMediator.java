package com.dailyselfie.model.mediator;

import android.content.Context;
import android.content.SharedPreferences;
import android.net.Uri;
import android.util.Log;

import com.dailyselfie.client.oauth.SecuredRestBuilder;
import com.dailyselfie.client.unsafe.UnsafeHttpsClient;
import com.dailyselfie.model.content.SelfieResolver;
import com.dailyselfie.model.mediator.webdata.SelfieRecord;
import com.dailyselfie.model.mediator.webdata.SelfieServiceProxy;
import com.dailyselfie.model.mediator.webdata.SelfieStatus;
import com.dailyselfie.utils.Constants;
import com.dailyselfie.utils.SelfieMediaStoreUtils;
import com.dailyselfie.utils.SelfieStorageUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import retrofit.RestAdapter;
import retrofit.client.OkClient;
import retrofit.client.Response;
import retrofit.mime.TypedFile;


/**
 * Mediates communication between the Selfie Service and the local
 * storage on the Android device.  The methods in this class block, so
 * they should be called from a background thread (e.g., via an
 * AsyncTask).
 */
public class SelfieDataMediator {

    public static final String CLIENT_ID = "mobile";
    /**
     * Status code to indicate that file is successfully
     * uploaded.
     */
    public static final String STATUS_UPLOAD_SUCCESSFUL =
            "Uploaded ";
    /**
     * Status code to indicate that file upload failed
     * due to large selfie size.
     */
    public static final String STATUS_UPLOAD_ERROR_FILE_TOO_LARGE =
            "Upload failed: File too big";
    /**
     * Status code to indicate that file upload failed.
     */
    public static final String STATUS_UPLOAD_ERROR =
            "Upload failed ";
    /**
     * Status code to indicate that file is successfully downloaded.
     */
    public static final String STATUS_DOWNLOAD_SUCCESSFUL =
            "Downloaded ";
    /**
     * Status code to indicate that file download failed.
     */
    public static final String STATUS_DOWNLOAD_ERROR =
            "Download failed ";
    public static final String STATUS_FILTER_ERROR =
            "Filter not applied ";
    public static final String STATUS_FILTER_SUCCESSFUL =
            "Filter Applied ";
    private static final String LOG_TAG = SelfieDataMediator.class.getSimpleName();
    /**
     * Defines methods that communicate with the Selfie Service.
     */
    public SelfieServiceProxy mSelfieServiceProxy;
    /**
     * Constructor that initializes the SelfieDataMediator.
     */

    public String user;
    public String pass;
    private Context mContext;

    public SelfieDataMediator(Context context) {

        SharedPreferences sharedPreferences = context.getSharedPreferences("Login", Context.MODE_PRIVATE);
        user = sharedPreferences.getString("User", "");
        pass = sharedPreferences.getString("Password", "");
        Log.d(LOG_TAG, user + " " + pass);
        mSelfieServiceProxy = new SecuredRestBuilder()
                .setClient(new OkClient(UnsafeHttpsClient.getUnsafeOkHttpClient()))
                .setEndpoint(Constants.SERVER_URL)
                .setLoginEndpoint(Constants.SERVER_URL + SelfieServiceProxy.TOKEN_PATH)
                .setLogLevel(RestAdapter.LogLevel.FULL)
                .setUsername(user).setPassword(pass).setClientId(CLIENT_ID)
                .build().create(SelfieServiceProxy.class);
    }


    /**
     * Uploads the Selfie having the given Id.  This Id is the Id of
     * Selfie in Android Selfie Content Provider.
     *
     * @return A String indicating the status of the selfie upload operation.
     */
    public String uploadSelfie(Context context,
                               Uri selfieUri) {
        // Get the path of selfie file from selfieUri.
        String filePath = SelfieMediaStoreUtils.getPath(context,
                selfieUri);

        // Get the Selfie from Android Selfie Content Provider having
        // the given filePath.
        SelfieRecord androidSelfie =
                SelfieMediaStoreUtils.getSelfie(context,
                        filePath);

        Log.d(LOG_TAG, androidSelfie.getName() + " " + androidSelfie.getContentType());

        // Check if any such Selfie exists in Android Selfie Content
        // Provider.
        if (androidSelfie != null) {
            // Add the metadata of the Selfie to the Selfie Service and
            // get the resulting Selfie that contains additional
            // meta-data (e.g., Id and ContentType) generated by the
            // Selfie Service.

            String dateTime[] = androidSelfie.getName().split("_");
            String date = dateTime[0];
            androidSelfie.setDate_created(date);
            androidSelfie.setDate_modified(date);

            SelfieRecord receivedSelfie =
                    mSelfieServiceProxy.addSelfie(androidSelfie);

            // Check if the Selfie Service returned any Selfie metadata.
            if (receivedSelfie != null) {
                // Prepare to Upload the Selfie data.

                // Create an instance of the file to upload.
                File selfieFile = new File(filePath);

                // Check if the file size is less than the size of the
                // selfie that can be uploaded to the Selfie Service.
                if (selfieFile.length() < Constants.MAX_SIZE_MEGA_BYTE) {
                    // Upload the Selfie data to the Selfie Service and get the
                    // status of the uploaded selfie data.
                    SelfieStatus status =
                            mSelfieServiceProxy.setSelfieData
                                    (receivedSelfie.getId(),
                                            new TypedFile(receivedSelfie.getContentType(),
                                                    selfieFile));

                    // Check if the Status of the Selfie is ready or not.
                    if (status.getState() == SelfieStatus.SelfieState.READY) {
                        // Update the provider
                        receivedSelfie.setPath(filePath);
                        Log.d(LOG_TAG, "^^^^ "+receivedSelfie.toString());

                        new SelfieResolver(context.getContentResolver()).insert(receivedSelfie);
                        // Selfie successfully uploaded.
                        return STATUS_UPLOAD_SUCCESSFUL + receivedSelfie.getName();
                    }
                } else
                    // Selfie can't be uploaded due to large selfie size.
                    return STATUS_UPLOAD_ERROR_FILE_TOO_LARGE;
            }
        }

        // Error occured while uploading the selfie.
        return STATUS_UPLOAD_ERROR;
    }

    /**
     * Get the List of Selfies from Selfie Service.
     *
     * @return the List of Selfies from Server or null if there is
     * failure in getting the Selfies.
     */
    public List<SelfieRecord> getSelfieList() {
//        Log.d(LOG_TAG,mSelfieServiceProxy.getSelfieList().toString());
        return (ArrayList<SelfieRecord>) mSelfieServiceProxy.getSelfieList();
    }

    /**
     * Downloads the Selfie having its Id.
     *
     * @param context  The context.
     * @param selfieId The selfie ID.
     * @return A String indicating the status of the selfie download operation.
     */
    public String downloadSelfie(Context context, long selfieId) {
        // Get the Selfie from the resolver having its ID.
        SelfieResolver resolver = new SelfieResolver(context.getContentResolver());
        SelfieRecord androidSelfie = resolver.query(selfieId);

        if (androidSelfie != null) {
            // Download the selfie from the server
            Response response = mSelfieServiceProxy.getData(androidSelfie.getId());

            // Store the selfie file in external directory
            File selfieFile = SelfieStorageUtils.storeSelfieInExternalDirectory(
                    context, response, androidSelfie.getName());

            // Check if the selfie is saved or not
            if (selfieFile != null) {
                // Update provider
                androidSelfie.setPath(selfieFile.getAbsolutePath());
                resolver.update(androidSelfie);
                // Selfie successfully downloaded.
                return STATUS_DOWNLOAD_SUCCESSFUL + androidSelfie.getName();
            }
        }
        // Error occured while downloading the selfie.
        return STATUS_DOWNLOAD_ERROR;
    }

    public String applyFilters(Context context, long selfieId, List<String> filterCommands) {
        SelfieResolver resolver = new SelfieResolver(context.getContentResolver());
        SelfieRecord androidSelfie = resolver.query(selfieId);

        if (androidSelfie != null) {

            File selfieFile = new File(androidSelfie.getPath());

            // Apply filter
                Response response = mSelfieServiceProxy.applyFilters(filterCommands, new TypedFile("image/jpeg", selfieFile));

                // Store the selfie file in external directory
                File selfieFile1 = SelfieStorageUtils.storeSelfieInExternalDirectory(
                        context, response, androidSelfie.getName());

                // Check if the selfie is saved or not
                if (selfieFile1 != null) {
                    // Update provider
                    androidSelfie.setPath(selfieFile1.getAbsolutePath());
                    resolver.update(androidSelfie);
            }

            selfieFile.delete();

            if (selfieFile1.length() < Constants.MAX_SIZE_MEGA_BYTE) {
                // Upload the Selfie data to the Selfie Service and get the
                // status of the uploaded selfie data.
                SelfieStatus status =
                        mSelfieServiceProxy.setSelfieData
                                (androidSelfie.getId(),
                                        new TypedFile(androidSelfie.getContentType(),
                                                selfieFile1));

                // Check if the Status of the Selfie is ready or not.
                if (status.getState() == SelfieStatus.SelfieState.READY) {
                    resolver.update(androidSelfie);
                    // Selfie successfully uploaded.
                    return STATUS_FILTER_SUCCESSFUL + androidSelfie.getName();
                }
            }

        }
        return STATUS_FILTER_ERROR;

    }

    public void delete(Context context, long selfieId) {
        // Get the Selfie from the resolver having its ID.
        Log.d(LOG_TAG,"delete");
        SelfieResolver resolver = new SelfieResolver(context.getContentResolver());
        SelfieRecord androidSelfie = resolver.query(selfieId);

        if (androidSelfie != null) {
            Response status =
                    mSelfieServiceProxy.delete(androidSelfie.getId());
            Log.d(LOG_TAG,status.toString());

                resolver.delete(androidSelfie);

        }

    }
}


